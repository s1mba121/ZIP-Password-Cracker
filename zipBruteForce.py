import zipfile
import rarfile
import py7zr
import itertools
import string
from concurrent.futures import ThreadPoolExecutor
import time
import os
import argparse
from tqdm import tqdm  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

ascii_art = r"""
         _nnnn_                      
        dGGGGMMb
       @p~qp~~qMb
       M|@||@) M|
       @,----.JM|
      JS^\__/  qKL
     dZP        qKRb
    dZP          qKKb
   fZP            SMMb
   HZM  s1mba121  MMMM
   FqM            MMMM
 __| ".        |\dS"qML
 |    `.       | `' \Zq
_)      \.___.,|     .'
\____   )MMMMMM|   .'
     `-'       `--'
     
üîí ZIP Password Cracker üîí
"""

print(ascii_art)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Bruteforce Archive Password Cracker")
parser.add_argument("archive_file", help="–ò–º—è –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –≤–∑–ª–æ–º–∞")
parser.add_argument("-n", "--numeric", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è")
parser.add_argument("-c", "--cluster", action="store_true", help="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –∫–ª–∞—Å—Ç–µ—Ä–∞")
parser.add_argument("--total-nodes", type=int, help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∫–ª–∞—Å—Ç–µ—Ä–∞)")
parser.add_argument("--node-index", type=int, help="–ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ (–Ω–∞—á–∏–Ω–∞—è —Å 0)")
parser.add_argument("--d", "--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –ø—Ä–æ–±—É–µ–º—ã–π –ø–∞—Ä–æ–ª—å")
parser.add_argument("-f", "--password-file", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–æ–ª–µ–π")
parser.add_argument("--lang", choices=["ru", "en"], default="en", help="–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (ru –∏–ª–∏ en)")
args = parser.parse_args()

archive_file = args.archive_file
use_numeric_only = args.numeric
use_cluster_mode = args.cluster
debug_mode = args.d
total_nodes = args.total_nodes
node_index = args.node_index
password_file = args.password_file
language = args.lang

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
messages = {
    "en": {
        "cluster_error": "In cluster mode, --total-nodes and --node-index must be specified.",
        "node_index_error": "Node index must be between 0 and total_nodes - 1.",
        "cluster_mode": "‚öôÔ∏è Cluster mode enabled: Node {}/{}",
        "default_mode": "‚öôÔ∏è Default mode enabled",
        "welcome": "üîê Welcome to the Bruteforce Archive Password Cracker üîê\n",
        "unsupported_format": "Unsupported archive format!",
        "enter_min_length": "Enter minimum password length (0 to start from 1): ",
        "invalid_min_length": "Invalid value for minimum password length.",
        "enter_max_length": "Enter maximum password length (0 for infinite): ",
        "invalid_max_length": "Invalid value for maximum password length.",
        "password_found": "\n[+] Password found: {}",
        "password_saved": "Password saved to file: {}",
        "password_file_read": "üîç Reading passwords from file: {}",
        "bruteforce_complete": "\nüíÄ Bruteforce complete üíÄ",
        "trying_length": "\nüöÄ Trying length of {} characters...",
        "bruteforce_start": "Starting bruteforce...\n",
        "time_elapsed": "Time: {:.2f} sec",
        "process": "Process"
    },
    "ru": {
        "cluster_error": "–í —Ä–µ–∂–∏–º–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --total-nodes –∏ --node-index.",
        "node_index_error": "–ò–Ω–¥–µ–∫—Å —É–∑–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ total_nodes - 1.",
        "cluster_mode": "‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –£–∑–µ–ª {} –∏–∑ {}",
        "default_mode": "‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
        "welcome": "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bruteforce Archive Password Cracker üîê\n",
        "unsupported_format": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞!",
        "enter_min_length": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (0 –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å 1): ",
        "invalid_min_length": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è.",
        "enter_max_length": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏): ",
        "invalid_max_length": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è.",
        "password_found": "\n[+] –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: {}",
        "password_saved": "–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {}",
        "password_file_read": "üîç –ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {}",
        "bruteforce_complete": "\nüíÄ –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω üíÄ",
        "trying_length": "\nüöÄ –ü—Ä–æ–±—É–µ–º –¥–ª–∏–Ω—É {} —Å–∏–º–≤–æ–ª–æ–≤...",
        "bruteforce_start": "–ù–∞—á–∏–Ω–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å...\n",
        "time_elapsed": "–í—Ä–µ–º—è: {:.2f} —Å–µ–∫",
        "process": "–ü—Ä–æ—Ü–µ—Å—Å"
    }
}

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
msg = messages[language]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
if use_cluster_mode:
    if total_nodes is None or node_index is None:
        print(msg["cluster_error"])
        exit(1)
    if node_index < 0 or node_index >= total_nodes:
        print(msg["node_index_error"])
        exit(1)
    print(msg["cluster_mode"].format(node_index + 1, total_nodes))
else:
    print(msg["default_mode"])

print(msg["welcome"])

# –ó–∞–¥–∞–µ–º –Ω–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
digit_charset = string.digits
full_charset = string.ascii_lowercase + string.digits

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª
if password_file is None:
    try:
        min_length = int(input(msg["enter_min_length"]))
        if min_length == 0:
            min_length = 1
    except ValueError:
        print(msg["invalid_min_length"])
        exit(1)

    try:
        max_length = int(input(msg["enter_max_length"]))
    except ValueError:
        print(msg["invalid_max_length"])
        exit(1)

file_extension = os.path.splitext(archive_file)[1].lower()

def save_password_to_file(password):
    filename = f"{os.path.splitext(archive_file)[0]}_password.txt"
    with open(filename, "w") as f:
        f.write(password)
    print(msg["password_saved"].format(filename))

def try_zip(password):
    try:
        with zipfile.ZipFile(archive_file) as zf:
            zf.extractall(pwd=password.encode('utf-8'))
            print(msg["password_found"].format(password))
            save_password_to_file(password)
            return True
    except (RuntimeError, zipfile.BadZipFile):
        return False

def try_rar(password):
    try:
        with rarfile.RarFile(archive_file) as rf:
            rf.extractall(pwd=password)
            print(msg["password_found"].format(password))
            save_password_to_file(password)
            return True
    except (rarfile.BadRarFile, rarfile.PasswordRequired, rarfile.RarCannotExec):
        return False

def try_7z(password):
    try:
        with py7zr.SevenZipFile(archive_file, mode='r', password=password) as zf:
            zf.extractall()
            print(msg["password_found"].format(password))
            save_password_to_file(password)
            return True
    except (py7zr.Bad7zFile, py7zr.PasswordRequired, py7zr.ArchiveError):
        return False

if file_extension == '.zip':
    try_password = try_zip
elif file_extension == '.rar':
    try_password = try_rar
elif file_extension == '.7z':
    try_password = try_7z
else:
    print(msg["unsupported_format"])
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–π
def bruteforce_from_file():
    with open(password_file, 'r', encoding='utf-8') as file:
        lines = file.readlines()
        total_passwords = len(lines)
        start_time = time.time()
        
        with tqdm(total=total_passwords, desc=msg["process"]) as pbar:
            with ThreadPoolExecutor() as executor:
                for i, line in enumerate(lines):
                    password = line.strip()

                    if use_cluster_mode and i % total_nodes != node_index:
                        continue

                    if debug_mode:
                        print(f"[DEBUG] Trying password: {password}")

                    future = executor.submit(try_password, password)
                    if future.result():
                        executor.shutdown(wait=False)
                        pbar.close()
                        return True
                    
                    pbar.update(1)

                elapsed_time = time.time() - start_time
                pbar.set_postfix({msg["time_elapsed"]: f"{elapsed_time:.2f} —Å–µ–∫"})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
def bruteforce():
    length = min_length
    charset = digit_charset if use_numeric_only else full_charset

    while max_length == 0 or length <= max_length:
        print(msg["trying_length"].format(length))
        combinations = itertools.product(charset, repeat=length)
        total_combinations = sum(1 for _ in itertools.product(charset, repeat=length))
        start_time = time.time()

        with tqdm(total=total_combinations, desc=f"{msg['process']} {length}") as pbar:
            with ThreadPoolExecutor() as executor:
                for i, password_tuple in enumerate(combinations):
                    password = ''.join(password_tuple)

                    if use_cluster_mode and i % total_nodes != node_index:
                        continue

                    if debug_mode:
                        print(f"[DEBUG] Trying password: {password}")

                    future = executor.submit(try_password, password)
                    if future.result():
                        executor.shutdown(wait=False)
                        pbar.close()
                        return True

                    pbar.update(1)

                elapsed_time = time.time() - start_time
                pbar.set_postfix({msg["time_elapsed"]: f"{elapsed_time:.2f} —Å–µ–∫"})
                
        length += 1

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–ª–æ–º–∞
print(msg["bruteforce_start"])
if password_file:
    print(msg["password_file_read"].format(password_file))
    result = bruteforce_from_file()
else:
    result = bruteforce()

if not result:
    print(msg["bruteforce_complete"])
